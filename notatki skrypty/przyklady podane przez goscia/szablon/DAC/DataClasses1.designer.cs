#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="proba")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTable1(Table1 instance);
    partial void UpdateTable1(Table1 instance);
    partial void DeleteTable1(Table1 instance);
    partial void InsertTable2(Table2 instance);
    partial void UpdateTable2(Table2 instance);
    partial void DeleteTable2(Table2 instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::DAC.Properties.Settings.Default.probaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Table1> Table1s
		{
			get
			{
				return this.GetTable<Table1>();
			}
		}
		
		public System.Data.Linq.Table<Table2> Table2s
		{
			get
			{
				return this.GetTable<Table2>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Table1")]
	public partial class Table1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _nr;
		
		private string _name;
		
		private System.Nullable<short> _id;
		
		private EntityRef<Table2> _Table2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnrChanging(short value);
    partial void OnnrChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnidChanging(System.Nullable<short> value);
    partial void OnidChanged();
    #endregion
		
		public Table1()
		{
			this._Table2 = default(EntityRef<Table2>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nr", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short nr
		{
			get
			{
				return this._nr;
			}
			set
			{
				if ((this._nr != value))
				{
					this.OnnrChanging(value);
					this.SendPropertyChanging();
					this._nr = value;
					this.SendPropertyChanged("nr");
					this.OnnrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(10)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="SmallInt")]
		public System.Nullable<short> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._Table2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table2_Table1", Storage="_Table2", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public Table2 Table2
		{
			get
			{
				return this._Table2.Entity;
			}
			set
			{
				Table2 previousValue = this._Table2.Entity;
				if (((previousValue != value) 
							|| (this._Table2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Table2.Entity = null;
						previousValue.Table1s.Remove(this);
					}
					this._Table2.Entity = value;
					if ((value != null))
					{
						value.Table1s.Add(this);
						this._id = value.id;
					}
					else
					{
						this._id = default(Nullable<short>);
					}
					this.SendPropertyChanged("Table2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Table2")]
	public partial class Table2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _typ;
		
		private string _name;
		
		private EntitySet<Table1> _Table1s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OntypChanging(string value);
    partial void OntypChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Table2()
		{
			this._Table1s = new EntitySet<Table1>(new Action<Table1>(this.attach_Table1s), new Action<Table1>(this.detach_Table1s));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typ", DbType="NChar(10)")]
		public string typ
		{
			get
			{
				return this._typ;
			}
			set
			{
				if ((this._typ != value))
				{
					this.OntypChanging(value);
					this.SendPropertyChanging();
					this._typ = value;
					this.SendPropertyChanged("typ");
					this.OntypChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Table2_Table1", Storage="_Table1s", ThisKey="id", OtherKey="id")]
		public EntitySet<Table1> Table1s
		{
			get
			{
				return this._Table1s;
			}
			set
			{
				this._Table1s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Table1s(Table1 entity)
		{
			this.SendPropertyChanging();
			entity.Table2 = this;
		}
		
		private void detach_Table1s(Table1 entity)
		{
			this.SendPropertyChanging();
			entity.Table2 = null;
		}
	}
}
#pragma warning restore 1591
